- name: Install GlusterFS
  hosts: swarm_nodes
  tasks:
    - name: Install GlusterFS
      ansible.builtin.apt:
        name: glusterfs-server
        state: present
      become: true

    - name: Start GlusterFS
      ansible.builtin.systemd_service:
        name: glusterd
        state: started
        enabled: true
      become: true

- name: Create GlusterFS Brick Directory
  hosts: swarm_nodes
  tasks:
    - name: Check if directory for gluster data exists
      ansible.builtin.stat:
        path: /bricks/appdata
      register: gluster_dir

    - name: Ensure directory for gluster data exists
      ansible.builtin.file:
        path: /bricks/appdata
        state: directory
        recurse: true
      become: true
      when: not gluster_dir.stat.exists

- name: Create GlusterFS Volume
  hosts: swarm_managers[0]
  tasks:
    - name: Probe GlusterFS peers
      command: gluster peer probe {{ item }}
      with_items: "{{ groups['swarm_nodes'] | difference([inventory_hostname]) | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"
      become: true
      register: probe_result
      changed_when: "'already in peer list' not in probe_result.stdout"

    - name: create gluster volume
      gluster.gluster.gluster_volume:
        state: present
        name: appdata
        bricks: /bricks/appdata
        cluster: "{{ groups['swarm_nodes'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
        options:
          { storage.owner-uid: "1000",
            storage.owner-gid: "988"
          }
        replicas: "{{ groups['swarm_nodes'] | length }}"
        force: true
      become: true
      run_once: true

    - name: Start gluster volume
      gluster.gluster.gluster_volume:
        state: started
        name: appdata
      become: true
      run_once: true

- name: Mount GlusterFS Volume
  hosts: swarm_nodes
  tasks:
    - name: Check if directory for gluster mount dir exists
      ansible.builtin.stat:
        path: /mnt/gluster/appdata
      register: gluster_mount_dir

    - name: Unmount broken mount
      ansible.posix.mount:
        path: /mnt/gluster/appdata
        state: unmounted
      become: true
      when: gluster_mount_dir.msg is defined and gluster_mount_dir.msg == "Transport endpoint is not connected"

    - name: Ensure directory for gluster mount dir exists
      ansible.builtin.file:
        path: /mnt/gluster/appdata
        state: directory
        owner: admin
        group: docker
        recurse: true
      become: true
      when: not gluster_mount_dir.stat.exists

    - name: Mount the gluster volume
      ansible.posix.mount:
        src: localhost:/appdata
        path: /mnt/gluster/appdata
        state: mounted
        fstype: glusterfs
        opts: defaults,_netdev,backupvolfile-server=localhost
      become: true
